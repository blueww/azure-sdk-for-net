// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.StoragePool
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiskPoolsOperations.
    /// </summary>
    public static partial class DiskPoolsOperationsExtensions
    {
            /// <summary>
            /// Gets a list of Disk Pools in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DiskPool> ListBySubscription(this IDiskPoolsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Disk Pools in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiskPool>> ListBySubscriptionAsync(this IDiskPoolsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of DiskPools.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<DiskPool> ListByResourceGroup(this IDiskPoolsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of DiskPools.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiskPool>> ListByResourceGroupAsync(this IDiskPoolsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            public static DiskPool CreateOrUpdate(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, diskPoolName, diskPoolPayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskPool> CreateOrUpdateAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, diskPoolPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Storage Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            public static DiskPool Update(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload)
            {
                return operations.UpdateAsync(resourceGroupName, diskPoolName, diskPoolPayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Storage Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskPool> UpdateAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, diskPoolPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            public static void Delete(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName)
            {
                operations.DeleteAsync(resourceGroupName, diskPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, diskPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            public static DiskPool Get(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName)
            {
                return operations.GetAsync(resourceGroupName, diskPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskPool> GetAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, diskPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            public static DiskPool BeginCreateOrUpdate(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, diskPoolName, diskPoolPayload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='diskPoolPayload'>
            /// Request payload for Disk Pool operations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskPool> BeginCreateOrUpdateAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, DiskPool diskPoolPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskPoolName, diskPoolPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            public static void BeginDelete(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName)
            {
                operations.BeginDeleteAsync(resourceGroupName, diskPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Disk Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='diskPoolName'>
            /// The name of the Disk Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDiskPoolsOperations operations, string resourceGroupName, string diskPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, diskPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of Disk Pools in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiskPool> ListBySubscriptionNext(this IDiskPoolsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Disk Pools in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiskPool>> ListBySubscriptionNextAsync(this IDiskPoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of DiskPools.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiskPool> ListByResourceGroupNext(this IDiskPoolsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of DiskPools.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiskPool>> ListByResourceGroupNextAsync(this IDiskPoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
