// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.StoragePool.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request payload for Create or Update Disk Pool requests.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DiskPool : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the DiskPool class.
        /// </summary>
        public DiskPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskPool class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="availabilityZones">Logical zone for DiskPool
        /// resource.</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="provisioningState">State of provisioning of the Disk
        /// pool. Possible values include: 'Invalid', 'Succeeded', 'Failed',
        /// 'Canceled', 'Pending'</param>
        /// <param name="status">Operational status of the Disk pool. Possible
        /// values include: 'Invalid', 'Unknown', 'Healthy',
        /// 'Unhealthy'</param>
        /// <param name="disks">List of Azure managed disks to attach to a
        /// DiskPool</param>
        /// <param name="subnetId">Azure resource id of the subnet for the
        /// DiskPool</param>
        /// <param name="sku">Sku description.</param>
        public DiskPool(string location, IList<string> availabilityZones, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string provisioningState = default(string), string status = default(string), IList<Disk> disks = default(IList<Disk>), string subnetId = default(string), Sku sku = default(Sku))
            : base(location, id, name, type, tags)
        {
            AdditionalProperties = additionalProperties;
            ProvisioningState = provisioningState;
            AvailabilityZones = availabilityZones;
            Status = status;
            Disks = disks;
            SubnetId = subnetId;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets state of provisioning of the Disk pool. Possible values
        /// include: 'Invalid', 'Succeeded', 'Failed', 'Canceled', 'Pending'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets logical zone for DiskPool resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZones")]
        public IList<string> AvailabilityZones { get; set; }

        /// <summary>
        /// Gets operational status of the Disk pool. Possible values include:
        /// 'Invalid', 'Unknown', 'Healthy', 'Unhealthy'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets list of Azure managed disks to attach to a DiskPool
        /// </summary>
        [JsonProperty(PropertyName = "properties.disks")]
        public IList<Disk> Disks { get; set; }

        /// <summary>
        /// Gets or sets azure resource id of the subnet for the DiskPool
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnetId")]
        public string SubnetId { get; set; }

        /// <summary>
        /// Gets or sets sku description.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

    }
}
