// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for LeaseState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LeaseState
    {
        [EnumMember(Value = "Available")]
        Available,
        [EnumMember(Value = "Leased")]
        Leased,
        [EnumMember(Value = "Expired")]
        Expired,
        [EnumMember(Value = "Breaking")]
        Breaking,
        [EnumMember(Value = "Broken")]
        Broken
    }
    internal static class LeaseStateEnumExtension
    {
        internal static string ToSerializedValue(this LeaseState? value)
        {
            return value == null ? null : ((LeaseState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this LeaseState value)
        {
            switch( value )
            {
                case LeaseState.Available:
                    return "Available";
                case LeaseState.Leased:
                    return "Leased";
                case LeaseState.Expired:
                    return "Expired";
                case LeaseState.Breaking:
                    return "Breaking";
                case LeaseState.Broken:
                    return "Broken";
            }
            return null;
        }

        internal static LeaseState? ParseLeaseState(this string value)
        {
            switch( value )
            {
                case "Available":
                    return LeaseState.Available;
                case "Leased":
                    return LeaseState.Leased;
                case "Expired":
                    return LeaseState.Expired;
                case "Breaking":
                    return LeaseState.Breaking;
                case "Broken":
                    return LeaseState.Broken;
            }
            return null;
        }
    }
}
