// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An object that wraps the lifecycle rule. Each rule is uniquely defined
    /// by name.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ManagementPolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicyRule class.
        /// </summary>
        public ManagementPolicyRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicyRule class.
        /// </summary>
        /// <param name="enabled">Rule is enabled if set to true.</param>
        /// <param name="name">A rule name can contain any combination of alpha
        /// numeric characters. Rule name is case-sensitive. It must be unique
        /// within a policy.</param>
        /// <param name="type">The valid value is Lifecycle</param>
        /// <param name="actions">An object that defines the action
        /// set.</param>
        /// <param name="filters">An object that defines the filter
        /// set.</param>
        public ManagementPolicyRule(bool? enabled = default(bool?), string name = default(string), string type = default(string), ManagementPolicyAction actions = default(ManagementPolicyAction), ManagementPolicyFilter filters = default(ManagementPolicyFilter))
        {
            Enabled = enabled;
            Name = name;
            Type = type;
            Actions = actions;
            Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets rule is enabled if set to true.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets a rule name can contain any combination of alpha
        /// numeric characters. Rule name is case-sensitive. It must be unique
        /// within a policy.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the valid value is Lifecycle
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets an object that defines the action set.
        /// </summary>
        [JsonProperty(PropertyName = "definition.actions")]
        public ManagementPolicyAction Actions { get; set; }

        /// <summary>
        /// Gets or sets an object that defines the filter set.
        /// </summary>
        [JsonProperty(PropertyName = "definition.filters")]
        public ManagementPolicyFilter Filters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Filters != null)
            {
                Filters.Validate();
            }
        }
    }
}
