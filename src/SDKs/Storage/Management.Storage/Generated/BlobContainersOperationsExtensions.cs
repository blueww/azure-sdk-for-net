// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlobContainersOperations.
    /// </summary>
    public static partial class BlobContainersOperationsExtensions
    {
            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static ListContainerItems List(this IBlobContainersOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListContainerItems> ListAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='metadata'>
            /// TODO
            /// </param>
            public static BlobContainer Create(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, PublicAccess? publicAccess = default(PublicAccess?), IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.CreateAsync(resourceGroupName, accountName, containerName, publicAccess, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='metadata'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> CreateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, PublicAccess? publicAccess = default(PublicAccess?), IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, publicAccess, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='metadata'>
            /// TODO
            /// </param>
            public static BlobContainer Update(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, PublicAccess? publicAccess = default(PublicAccess?), IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, accountName, containerName, publicAccess, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='metadata'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> UpdateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, PublicAccess? publicAccess = default(PublicAccess?), IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, publicAccess, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static BlobContainer Get(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.GetAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> GetAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void Delete(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void Lease(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.LeaseAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LeaseAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LeaseWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            public static LegalHold SetLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags = default(IList<string>))
            {
                return operations.SetLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> SetLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            public static LegalHold ClearLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags = default(IList<string>))
            {
                return operations.ClearLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> ClearLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClearLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// TODO
            /// </param>
            public static ImmutabilityPolicy CreateOrUpdateImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int immutabilityPeriodSinceCreationInDays)
            {
                return operations.CreateOrUpdateImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> CreateOrUpdateImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int immutabilityPeriodSinceCreationInDays, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy GetImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch)
            {
                return operations.GetImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> GetImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy DeleteImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch)
            {
                return operations.DeleteImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> DeleteImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy LockImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch)
            {
                return operations.LockImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> LockImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LockImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// TODO
            /// </param>
            public static ImmutabilityPolicy ExtendImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int immutabilityPeriodSinceCreationInDays)
            {
                return operations.ExtendImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> ExtendImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int immutabilityPeriodSinceCreationInDays, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExtendImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
